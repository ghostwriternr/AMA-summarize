[deleted]
The moderators have verified this post.
I am curious, do you get payed for your work? By who? Or do you need a day job?
I am a fairly high level programmer who has almost no knowledge of how the kernel works.   How would you recommend an interested person get started learning the ropes and getting involved?
I'm a SysAdmin working primarily with Windows Server and Debian.  It seems like most vendors we talk to are moving to a Windows Server backend and not really using Linux other than as a web server.    I understand that Unix/Linux is still widely used in the enterprise (BSD, RedHat), but more it seems more and more vendors are moving towards Windows.  Is this a trend you worry about?  If so, are you picking up any Windows knowledge such as Powershell?   To be clear; I'm not a Windows fan boy.  I grew up with Debian and still love it.  I just want your insight as someone who has worked with Linux longer than I have. 
I am paid for my work. Unfortunately, I cannot reveal the names of the companies I have worked for.  This is my day job.  To elaborate on your question, my pay has ranged from $28,000 at the start of my career to $180,000 currently.  I've worked in a variety of companies including:  * Three web hosting companies * A major software firm * A university * An ambulance manufacturing facility * Government contractor (full time, permanent)
I've never done software engineering for the Linux kernel officially. However, I have made source modifications to bash and various other applications to meet company requirements.  Since I don't have experience directly related to what you wanted, I don't feel comfortable making a specific recommendation. However, you can likely find guidance on the kernel development mailing lists.
There is definitely a trend as you pointed out towards Windows Server.  Let's face it, there will always be more people who know Windows Server than Linux and when stuff happens it tends to be easier to fix on Windows Server. This, along with many other factors, leads to the trend you point out.  Do I worry about it? Not really. If you look hard enough, most major companies have, and will continue to have, a large Linux/Unix footprint. In some cases, that footprint may be larger than the company even realizes.  With all that said, of course I'm learning Windows Server. You would be a fool in any profession not to learn. If you become stagnant, you become irrelevant.
Especially working in the IT field as it constantly changes.  Thanks for the reply.
I am in the first year of my degree college in the field of IT and i am very interested in learning Linux.but i'm really confused as there is a lot to it.so could you give me some tips on how to begin with? 
How did you get started back in the day?  What's your level of education?   Thanks in advance!
"OMG!!! working on linux should be just for fun, not for pay! if u want to get paid go work for microsoft, lol!!!"   -- /r/pcmasterrace 
Sure! Unfortunately, a lot of university Computer Science programs focus entirely on programming, human-computer interaction, and in some cases electronics engineering. There is little, if any, opportunity to formally learn anything about system administration or even desktop support.  I would recommend installing a Linux OS like CentOS in text-only mode and diving in. You can run this as a VM on your primary machine, a dual boot, or even an old computer/laptop you have laying around. If you don't mind spending some money and the other options aren't possible, you can get a VM cheaply from linode.com to get started.  Why text-only? I'm a firm believer that Linux just isn't that good as a desktop operating system and is more suited to a server environment. The GUI layer tacks on unnecessary load to the server while opening additional security risks.  As far as learning the commands, I have some tips for that too.  http://www.tldp.org/LDP/intro-linux/html/  If you have specific questions about my answer, i'll elaborate.
Hey there  I am someone who has seriously been considering the IT field. Ive always had an interest in computers but never really pried into it, im considering switching fields so I can learn more and see if its something for me. Could you offer some advice to someone looking to pursue this field? Thanks I appreciate it!
What exactly makes you a linux Architect specifically?    Are you an architect at Redhat/other Distro company? Do you at a low level diagram/spec low level command functions?  Do you figure out which API to use if a new driver is being created?  It seems to me you're most likely more of a Infrastructure Architect, which would be more common in the IT field, but I'll let you clarify :)
Has it ever been explained why the penguin is the symbol for Linux?
Settle down, rms..
In short, I had my first exposure to computers in 1990 from a friend but it was a few years later when I had my first experience with software development in the form of making web pages.  Once I figured out HTML (and later DHTML, JavaScript, CSS, and PHP), I started working in C, C++, and even ASM. It's all I did and all I wanted to do.  I started doing hex editing in order to cheat in SNES ROMs. I would figure out the cheat codes in a ROM and then use them in Game Genie on SNES.  Sometime around 1996, I had my first exposure to a Sun OS system running on sparc. I was absolutely enamored by the power of Linux/Unix/BSD. Everything was so easily accessible with just a few commands and it made sense to me.  Ever seen then, I've just been learning constantly.  As for my education? I started a formal education in Computer Science but dropped out to start my career. I discovered that, for me personally, I had the skill needed to get the jobs without a degree and I wasn't gaining anything by staying in school.
if you were to build a new OS from scratch, how would you diverge from how linux is designed?
Power8, yea or nay?
That's awesome! Thanks for the reply!
My present job title is one chosen by my company, not me ;)  To answer your question, I think it would be best to explain exactly what I do in my present position.  * I receive project requirements from project managers and translate them into technical requirements and bring them to full implementation, testing included.  * I write, debug, and modify new and existing software to match company and project requirements. For example, I've made changes to bash and x3270. I also modified the firmware on a Devon TC2 thin client to match company requirements.  * I handle security related incidents and write custom SELinux security policies  And, yes, I've written firmware drivers for equipment at other companies.
I've never really thought about it before though Tux (the penguin) has been on my desk for years in the form of a plush.  If there is an explained reason, I don't know it off hand.
Thanks for the answer.  The closest name I could think of that you would be in a general term is "System Integration Architect".    I do get sometimes companies throw around titles to people that don't really mean much for the job you actually do.  
I haven't had a chance to try out Power8 yet. My current employer is heavily into sparc and x86-64
It depends on what part of the field you want to get into...  Since this AMA is about Linux, I'm assuming you want to be a Linux system administrator or something of the sort...  As I told another redditor, I would recommend reading this and just trying stuff out:  http://www.tldp.org/LDP/intro-linux/html/  A good place to get started is a web hosting company. They generally operate as help desks but still get you exposure to Linux. It's how I got into the field professionally.
How many miles of text did you have to read to get there?  I've heard Linux is super complex.
If I were to disregard my official job title, I would call myself a Sr. Linux System Administrator if anything but titles are just titles. It's about the skill set.  Either way, I'm just hoping to inspire others to join our field and demystify what we do.
If I were to change one thing about Linux, I would have designed it to support real time patching from the start.  Linux does have solutions to this in the form of ksplice and other such software. I wish this had been something that was implemented from the very start.
This is the myth I was hoping to demystify in the process of this AMA.  Linux is not complicated. It's actually fairly easy and intuitive.  I do have to read the occasional man (short for manual) page but they are easy to read. For the most part, commands can be figured out just by inferring their purpose.  For example, cp copies files. It's pretty easy to guess that it's:  cp &lt;source&gt; &lt;target&gt;  If you want to see clear examples, check out:  http://www.tldp.org/LDP/intro-linux/html/  For those who don't want to use the Linux command line constantly, there are a number of GUIs you can install on top of it that will make most things point and click.
Linux seems text-heavy. Is it?  Is there a fast way to get the source and target addresses into the command line?  (I'm interested, but it seems like a big mountain to climb.) 
At it's core, Linux is a text-based operating system.  If you want to be a professional Linux System Administrator, it is imperative you understand the command line. The link I gave in my previous answer will help with that.  If you just want to be a hobby user and are curious, there's a number of GUIs that can be installed that make almost everything point and click. The command line will still be accessible but you won't have to use it for most things if you don't want to. A good example would be Ubuntu Linux.  To answer your second question, the command line does support tab completion which makes source and destination entry a lot quicker. However, tab completion only covers file system contents, not command parameters. In other words, you have to know the parameters a command needs but once you know that, tab can help fill them out.
Have any efforts been made to visualize the administrative aspects of Linux?
I'm not quite sure what you mean by visualize. The GUI I mentioned previously generally comes with several different administrative tools to handle user management, patching, software installation, etc...  When it comes to wide spread server administration across multiple servers, there is Chef and Puppet both of which require some scripting skills and understanding to setup but once you have the cookbooks/recipes setup, there are GUI based tools that let you designate servers as web server vs file server for example.  If this didn't answer your question, could you elaborate or maybe give an example of such software on Windows I can compare to?
Man, 28. I'm kind of jealous.  What is a good way to get into that type of position?  I currently run Linux at home, use it for some tasks at work. Primarily, my job right now is QA Engineer, but would much rather be working either in development or with Linux admin type position.
Do you prefer to work solo, or on a team?  A few years ago I made the switch from working with a group of Windows admins to being the single Linux admin for a group of web developers. I like being able to call the shots on how our Linux environment is setup, but I hate not being able to bounce ideas off another person. Ever been in a similar situation?
I started by working at a web hosting company. It had low entry requirements and some exposure to Linux to put on my resume.  I already knew Linux going in but there were plenty others who didn't and learned as they went.  Once I had that on my resume, I found it was just a matter of presentation and confidence to jump my career further.  Dress like you are an expert, walk with your back straight and head up, make eye contact, firm handshake, never let your voice quiver, and always admit when you don't know the answer then redirect to the closest experience you have that matches the question given.  You sound like you already have a good start towards moving into Linux since you run it at home and some at work. Continue learning and keep your eye out for opportunities. Linux System Administrator I is what you want.
Thanks for the tips!  I do often feel like "I have no idea what I'm doing." So, that's good to know it's not uncommon.
The key to a successful career is being able to work both solo and in a team. Despite your present situation, you never know when things may change one way or another and your performance shouldn't falter as a result of that.  With that said, most of the jobs I've had have been solo positions including currently. I work exceptionally well solo. When in groups, I work better as team lead.  I don't feel the need to bounce ideas off another person often but when I do, there are a few Windows admins around here that are pretty smart. I have to change the terms and sometimes explain background, but we can usually work together to get a resolution.  I do find that I wish I had another Linux guy around to back me up sometimes though. Even if I have a demonstratively correct answer on hand, sometimes it feels like management would rather a second opinion.
Hi! Thanks for devoting your time to this.   1) Do you think certain Linux distributions can be a viable alternative to Windows for home users?   2) I'm trying to learn Linux in my free time and though I see how powerful command line can be, I'm often baffled by number of commands and complexity of options each command has. Are advanced Linux users are expected to remember all of them and write something like `sed -e 's/\.//g'  -e 's/\,//g' -e 's/ /\ /g' | \` without hesitation or these type of commands require some reading and testing?  
I've been obsessed with computers since 1997 and finally made the leep to Linux a month ago.  Do you see Linux gaining more and more support lately?  Steam/Microsoft, or is it just because I'm new here?
1) I'm a firm believer that Windows is a better desktop solution and Linux is best suited to servers. However, that is a personal belief. If you must use Linux as a desktop, most seem to agree that Ubuntu is the easiest to get started with. As far as viability, it's perfectly suited to web browsing and other such desktop-related tasks but it's gaming support is limited and not all Windows software runs well in Wine.  2) Some commands are more complicated than others. 'sed' is one of these because it utilizes regular expressions. Other commands like 'cp' and 'rm' are much simpler.  In some cases, commands do entirely different things between systems. For example, in Linux based systems 'killall' takes parameters and can be used, for example, to kill all httpd processes (killall -9 httpd). However, in Solaris systems, 'killall' takes 0 parameters and will immediately kill ALL processes on the system.  To answer your question, it depends on your career level. Entry-level admins may only be expected to know basic commands, conditional statements, and loops. Intermediate-level admins are likely to be expected to know bash scripting and have a cursory knowledge of regular expressions.  Advanced-level administrators are expected to know most of these things on the top of their head without looking them up.  The key skills to a successful Linux career are:  * Bash scripting (you can use these commands directly on CLI too!) - for example, 'for i in 1 2 3; do echo $i; done;' would echo 1, 2, 3 on separate lines.  * Perl scripting (some companies use this)  * Ruby (if using Chef)  * Basic Linux commands  * Linux file system hierarchy
Depends on the company and it's field. As discussed elsewhere in this AMA, industry-wide the trend is actually away from Linux. More and more companies are moving from Linux to Windows.  I don't believe Linux will disappear though. Regarding Steam, it is doing wonders to increase gaming for Linux but I still believe Linux should be server-only.
Linux is not a drop in replacement for Windows.  If you want something that mostly just acts like Windows or OS X, Linux is probably not what you want.  But, if you want something powerful and customizable, Linux is unmatched in the desktop arena.  This power does come with some additional maintenance headaches, but for some people it's worth it.  Perhaps the most often overlooked *killer* feature of Linux is whole system package management.  In other words, the entire system is managed by a single package manager that you control.  It is actually *pleasant* to install, update, and uninstall software on Linux, and it blows my mind that the major vendors are so behind in this area.  Maybe if they weren't we wouldn't be trying to cram everything into the browser, but I digress.  There are tons of quality tools for Linux, but I thought I'd also mention [i3](https://i3wm.org/) as an example of something desktop-oriented you just can't get elsewhere.  Window management may be pretty in other operating systems, but it sure isn't practical.  Arch is the best distro I've used, but it doesn't sugarcoat anything ;)
You think we should be locked in to whatever the big vendors decide is best for us on the desktop?  The whole point of Linux is customizability, and the other platforms fall flat in this area.
On the desktop? No. In the workplace? Sometimes we don't have a choice.  I don't get into the whole open source vs closed source fight. There are a group of Linux people who will only use open source no matter what. I disagree with this. I believe you should use the right tool for the job, whether it be open source or not.  If you can give me a specific example, I may be able to comment better.
To further contribute to your point, if someone wants a Windows-like experience while having some of the flexibility of Linux, Mac is a great choice.  I actually use a Macbook Air for my Linux system administration needs. It does the desktop stuff I need extremely well, maintains good compatibility with Windows and the work place, and Terminal is flexible enough.  Regarding your comment on package management, that only applies if all software installed on your system comes in the form of a package. If you install something from source, you must update it from source.
Window management would be an easy example.  I linked to [i3](https://i3wm.org/) in another comment.  My primary point is that I can customize my *entire* desktop stack on Linux.  I'm fine with closed source, but open source does give an even greater granularity of customization.  I just don't think it's fair for you to flat out dismiss Linux as a desktop OS.  I've been using it for a decade and have very few complaints.  Maybe I should ask for an example of why you *don't* think it's suitable?  I'm not going to argue that it's *easy* to switch for someone used to doing things a particular way, but nothing worthwhile is ever easy.
Ok fair enough.  Yes, I do believe options should always be maintained in any operating system. Linux is the best example of this because you can literally swap everything from the kernel to the GUI as you pointed out.  It wasn't my intention to factually or expertly state that Linux cannot be used as a desktop operating system. If you, or anyone else, chooses to use it that's fine.  For me (personally), Linux is for text-only servers. My personal decision was bred from a number of factors:  * I'm more comfortable on the command line and find Linux more powerful and unique in the command line. Additionally, I've never found a good use for GUI in server environment.  * While things have improved in the past several years, and will continue to improve, a lot of issues still exist to a certain extent: Compatibility with work place (document formats, etc...), not all software is compatible with Wine, Drivers and Gaming still fall behind, etc...  If I need a GUI environment for work or productivity, I use my Macbook Air. It's combination of a decent GUI, compatibility, and BSD underpinning make for a great work computer.  If I need a gaming PC, it's Windows hands down.  If I want to host anything detached, it's Linux all the way.
I would argue that the proper way to install something from source is to package it.  Otherwise you're just polluting your system and circumventing the package manager.  It's pretty easy (at least it is on Arch).  The grey area here is things that like to maintain their own package ecosystem like python etc., but they usually have their own sandbox.  EDIT:  It's also relatively easy to modify/customize system packages.
python, perl, ruby, and php all have their own package systems. These can get confusing because sometimes packages can be installed either through the primary package system (yum for example) or through the subpackage system (like cpan).  It is pretty easy to make deb and rpm files and I do agree that it is best to package things. I was just using that as an example to the public, who may not know what we know, that you can't assume everything installed on your system came in the form of a package.  To expand for the general publics' knowledge, the standard at most companies I've worked is to use a self-hosted package repository that hosts package overrides (like a custom version of bash) and then set that repository as highest priority. Then when you do a system update or install, it'll install from your self-hosted repository first if available there.  You can then combine this with Chef or Puppet to assign roles to servers and have the servers automatically install the appropriate packages and configure them for use on first boot.  The company i'm at now has moved away from traditional server provisioning into the fully automated Chef environment. If a server gets compromised/infected or hardware dies, we can spin up an identical server in a matter of minutes.
I wouldn't argue for using Wine (and I don't use it).  Sure there are some programs written for other OSes that don't run on Linux, but the same is true for any OS.  I might point out that Valve's Vulkan driver is Linux only, and as I understand it this is due to the support from Intel for high quality open source drivers.  I'm not really a gamer, and I understand there just aren't as many games developed with Linux support (although there certainly are a lot more than there used to be!).  But these are not failings of the operating system.  Anyway, thanks for letting me argue :)
Hello LinuxArchitect!  I'm 20 and currently starting my IT career. I talk to my dad, uncle, and friend who all work in IT (they do networking, security, document imaging) and I plan on learning Linux very early in my career so I can hopefully get to where you're at. My friends all say that they don't know that many people with Linux and if I were to master it, I'd have a BIG leap ahead others.   Do you think I should learn Linux first and foremost and become an expert at that (which I'd love), or should I focus more on general networking and branch off into security into my future?   I'd like some more professional input. :) Thanks!
Not a problem ;) AMA = Argue mostly anything? lol  Regarding program incompatibility it really determines what you are doing. What I was trying to refer to is that a lot of jobs (and universities) have software that is required but just won't run on Linux, even under Wine, and the alternatives (like OpenOffice for example) are not good enough.  There are some people who would install a Windows VM to run Office but at that point, why not just run Windows?  If the PC you are on is totally personal, run Linux all you want. It's your choice. If others depend on your work and you depend on theirs, be a nice guy and run Windows. They'll thank you for it.
I'll speak from my experience here. Keep in mind, my experience may not be the same for the entire world.  I've discovered there are not that many people who really know and understand Linux in the work force in comparison to the total number of people who put Linux on their resume.  A lot of companies, including the ones I have worked for, have been burned over and over again by hiring lackluster Linux admins who do semi-decent on day-to-day operations but when it comes time to fix a problem/disaster or implement a new project they have to turn to Google. What happens when the internet isn't available and a mission critical system is down? You gotta know your stuff.  If you truly master Linux and can convey that confidently to the employer, you'll have a massive advantage in getting that job you want.  In my very first interview in this field, my answers were filled with a lot of uncertainty.... "Um....", "I think...", "Is it....?"  In the interview for my current position, I sat down and, from the top of my head, answered every question they proposed quickly, confidently, and correctly. I conveyed such confidence and mastery that they didn't finish the interview and instead extended the position. The guy who was set to go in after me was told to go home.  I'm not saying the above to brag but rather to illustrate a point. If you can show you have the knowledge and skill, you'll get the job.  As for what you should do, that depends on what you want to do. Not all Linux admins do security. Not all security people know Linux. Almost no network guys I know do Linux and almost no Linux guys I know do networking.  If you want to do Linux, I recommend learning it now. I've given links elsewhere in this AMA.  If you want to do Linux security, I recommend learning Linux then branching into SE Linux and other such stuff.  If you want to do networking, I recommend skipping to Cisco stuff and maybe get a cursory knowledge of Linux though understanding IOS would help you significantly more.  I think the best thing would be to learn a little bit of both software engineering and Linux. A lot of companies these days are moving away from Linux SysAdmin positions and towards DevOps positions which are a mixed breed of programmer/Linux.
lol I guess I'm just in an argumentative mood today.  Sure, that's a valid point if your company is entrenched in those technologies.  Same would be true of a Linux shop of course.  One could also choose not to work for those companies ;)  Personally I wouldn't want to run Windows because I've spent a lot of time customizing my workflow in Linux, and I find it to be the most powerful platform for development.  As an aside, I've found WPS Office to be much better than Open/LibreOffice.
Wow, thanks! I'll think about it and if I have any questions I'll ask you again. :) This is the great think about IT and technology, you're only 8 years older than me yet you're at a Sr. level position. I admire people like you! Thanks
In the interview did they ask you any of the nuances that differentiate Linux from other *nix's?
Oh yeah, I do have one more question. Do you *need* a Bachelor's to really get into IT? Or do you think that the absolute best way to learn and become a professional in the tech world is just to start out working in the field in a simple position and moving your way up by actually learning hands-on in the field?  My dad did kind of the same thing. Didn't get his Bachelor's but started out repairing copiers, printers, and what not, and then got into Networking positions and technical teaching and training. Is that how it usually goes?  And how valuable are certifications?
I do not have a degree of any kind and I'm obviously doing just fine. However, that comes with caveats.  First, if you don't have a degree you must be skilled. You have to show your potential employer that your experience is valuable regardless of degree.  Second, there are some companies/jobs you just won't get because of your lack of degree. Some employers are just stubborn...  Having a degree makes it easier to get past the screening and into the interview room but once you are in the interview room it makes little difference most of the time.  (Note to any potential haters, i'm not advocating against schooling. every person is different)  I got to where I am today precisely by starting at the bottom (web hosting company) and working my way up. I started entry-level linux based on personal experience though. I've never done desktop support professionally.  A lot of people I know got their start in desktop support and entry-level networking so it's definitely not uncommon.  Certifications depend on the certification and the company you want to work for. Unfortunately, there's a lot of so-called "paper certs" (mostly in the Windows world) that are easy to get and essentially have no meaning. This has degraded certificates in many company's eyes.  If you want a certification people will respect, I've had good luck with the RHCSA/RHCE, the expertise certificates, and the RHCA. They tend to be well respected.
What do you use as a personal OS? 
Most of the interviews I've been through have followed the same general script...  They'll ask you a series of questions in one of two forms:  * What command is used to copy files? * What does the 'cp' command do?  Then they'll ask a series of quick questions like:  * What port does HTTP run on? * What service typically listens on 443?  For the above two categories they are usually looking at how fast and how accurately you answer. The answers to those kinds of questions should be second nature to most in the field and should flow out naturally.  Then they'll ask you something like:  * I want to see the load average for the last 24 hours. What command could I use to see that?  Then there may be some bash scripting tests...  The only specific nuance question i've ever been asked was a trick question...  I log into a solaris system and want to kill all Apache processes.  &gt; killall -9 httpd  What happens?
On my personal servers, I utilize CentOS because it is derived from RHEL and that's where my primary qualifications are. As an aside, all of my personal servers are hosted on linode.com. They were previously on AWS but that became too costly (even for me).  On my gaming PC, I utilize Windows 8.1 and soon Windows 10 when it releases. This PC is only used for gaming.  For everything else, I utilize a Macbook Air on OS X Yosemite. I find this to be the perfect home-use operating system for me. It has BSD underpinnings which makes it perfect to interact with my Linux servers (both work and personal) and the GUI is powerful enough to run any sort of productivity application I would want.
What does `killall -9` do?  (I know what killall does)
On Linux, 'killall' operates similar to 'kill' in that you can specify a signal to send the process in addition to the process to kill.  http://linux.die.net/man/1/killall  So:  &gt; killall -9 httpd  does the same thing as  &gt; kill -9 4133  That is, it's sending the SIGKILL (terminate immediately) signal to the offending process. The only difference between one ('kill') takes a process ID and the other ('killall') takes a process name and kills any processes it finds with that name.  On Solaris, killall does not take any parameters.  &gt; killall -9 httpd  would actually immediately terminate all processes which effectively halts the system.  https://xorl.wordpress.com/2011/10/19/admin-mistakes-solaris-killall/
Any that window manger runs on top one of the worst bits of software ever created. The X11 window system. It's the only window system that I have ever used which actively gets in the way of things. On numerous occasions it crashes and I'm left with a partially functioning graphical shell that I CAN'T ACTUALLY EXIT FROM WITHOUT KILLING ALL MY WINDOWED APPS.
I'm a CS Major, and I'm trying to get started with Linux, but I'm not quite sure what exactly to "learn." I've installed and played with a few distros, but as you said, they just look like any other Desktop OS to me with the GUI and all. So what would you recommend I do to "dive in" once I have a distro installed?
Why is the popularity of Windows server increasing? I would have thought because there's been 40 years of Unix being used as a server,  and realistically only 10 years of Windows being used as one, that there's would have been to much technical know how tied up in Unix admin to move on.  For Windows Server to truly disrupt the market won't they need some killer improvement over Unix/Linux, something that nullifies any knowledge that admins have built up over the years?
As mentioned elsewhere on this AMA, I'd recommend installing CentOS in text-only mode (no desktop environment) and just dive in. Look stuff up, type commands, screw up, reinstall.  Accomplish short term goals... create a web server... a mail server... file server... etc...  Check out the link i've posted elsewhere in this AMA. It's a good guide to Linux.
I knew what `killall` did, though I didn't know you had to be so nervy to when using Solaris (not ever going to use that now).  What does the `-9` parameter mean? 
Thank you!
I'm sorry, I thought I had explained that. The -9 is the signal number (SIGKILL). If you don't specify a signal, it defaults to SIGTERM
A number of reasons...  First, as mentioned elsewhere in this AMA, there are simply more Windows admins out there than Linux admins and most people can learn Windows administration on the spot a lot quicker than Linux.  Second, as more and more enterprises move towards Active Directory (which is way better at an enterprise level than OpenLDAP) domains and associated technologies Windows becomes more viable.
I do performance testing for my job but when it comes to advice about improving performance on *NIX servers I can't give much advice. What should i focus on to learn more about identifing performance bottlenecks?
I was the same case as you and I naturally learned some when I needed to setup a minecraft server using an ECM instance. I did have some coaching from a friend but it was a great fun introduction into Linux
+1 for packages. Coming from windows it was quite fun to use
Um sorry?  I haven't seen an Xorg crash in years, though I am looking forward to Wayland.
No matter what the OS is, performance falls down into two categories: Hardware and Software.  Let's start with the obvious ones...  Check dmesg/syslog first and foremost. These will give you vital clues if it's a hardware issue or not. You might see filesystem complaints for example that could indicate a failing/failed hard drive or filesystem or you might find RAID issues or RAM issues here.  Next up, check iostat, top, and free for signs of high system load, CPU usage, RAM usage, or iowait.  You can also check smart status on hard drives.  Your most precious tool when viewing performance issues is sar though.  http://www.thegeekstuff.com/2011/03/sar-examples/
LOL good luck trying to get the admins tp install stuff for me on their servers. Depending on the client of course, but I've had issues even trying to get CPU/Disk/RAM monitors out of them.   Thanks for the link. Another questions, from your experience what do you find are the most common bottlenecks for web servers?
what about oomkiller? it seems like a dumb thing to have on a server in a way
Depends on the type of website and the software being used to run it really.  On a typically LAMP stack, the most common bottleneck has been IO wait for me. The disk just can't keep up with the number of requests being sent to it.  This is due to a ton of file uploads and database entries being handled on the same server.  Ideally, the different parts of the stack would be on different servers but in the real world that doesn't always happen.  In web hosting, the most common issue is on the web hosts side. They overload the servers with several thousand users and the CPU and RAM just get eaten up.
I'd like to note that the command line is seen as a strength, not a weakness. Yes there are gui interfaces to many server functions but a long time linux sysadmin would simply say: why on earth would you want to? That would weaken your greatest strength,
I assume you are referring to the Kernel's built in out of memory killer. This is a last ditch resort to keep the system running and on even a decently maintained system you'll likely never see this take place.  To read more about how it works, this is a good start:  http://unix.stackexchange.com/questions/153585/how-oom-killer-decides-which-process-to-kill-first
I don't think that's been more than a fringe attitude since the mid 90s...
How's the basement?  ***I kid....I kid.***  Seriously, though...how's the basement?
They took my stapler.
I kept the Swingline because it didn't bind up as much.
&gt;Linux is not complicated. It's actually fairly easy and intuitive.  So you haven't tried building a cluster with the Red Hat Cluster Suite I take it? Because that's what I thought until trying this out, which is the least intuitive thing I've ever seen lol. Also email... hardly intuitive at all.
Well, not everything is intuitive but the same can be said for other OS as well.  Yes, I've built a cluster and I've also done work with HPC infiniband clusters.  Email is better now than it used to be but man qmail...
What's your gaming PC specs? 
I want to be a linux programmer and do everything you said you did,how do I achieve it? I never encountered linux so far.  What should I learn first and then move on to(sequence of learning)? What should I keep an out for? Is being certified a big deal?
You were using linux/unix at age 9!?
This is great! Im currently an MCSE and just went through CCNA training, but Linux has always garnered my interest also, i just didn't know where to start. Thanks!
Yes, and programming a little before that.  For better or worse, I spent the majority of my childhood absolutely glued to computers figuring out anything and everything I could and my parents were both supportive of this.  I would literally stay up as late as I could on computers, go to sleep, wake up, go to school, come back home, get on the computer... I didn't hang out with friends, I didn't have a girlfriend...  Most of my social skills were learned on IRC.  I'm personally happy with this decision and I feel I had a great childhood. Your mileage may vary.
If you mean an actual programmer (as in kernel developer), I don't have any specific advice for that other than to check out the kernel development mailing lists. I have no experience in this area to speak of.  If you mean you want to learn how to use Linux, I'd recommend installing a text-only OS like CentOS without desktop environment and just play around. You'll screw up but just reinstall and start over.  Start with short term goals then learn what you need to achieve them.  For example, create a web server that displays a simple HTML page. In the process of achieving this goal, you can then learn to navigate the filesystem, create/move/modify/delete files, etc...  Check out the links I've given in this AMA and let me know if you have any specific questions regarding getting started.  There is nothing to keep an eye out for when getting started. Don't worry about cross platform nuances and stuff like that. Just stick to standardized software (apache instead of nginx for example) and read as many resources as you can trying step-by-step tutorials.  I would say to only use the tutorials as a starting point though. Most of them are not secure or performance optimized.  As I stated elsewhere in this AMA, a few certifications are good to have. For example, the Cisco certifications and RHEL certifications are both well respected.
* Corsair 250D * ASUS Maximus VII Impact * Intel i7-4790k @ 5.0 GHz * Corsair H100i * Corsair Dominator Platinum 2400 MT/s 16 GB RAM (2 x 8 GB) * MSI GTX 980 GAMING 4G * Corsair AX760i * 1 TB Samsung 840 EVO used as OS drive * 1 TB Samsung 850 EVO used as secondary game drive * 1 TB Samsung 850 EVO used as tertiary game drive * 6 TB Seagate Desktop Drive used as storage drive * 27" 1080p60 IPS panel  Yes, I know my single 1080p60 monitor is woefully underclass compared to my rig but it does me fine so I'm ok with that.
20 y/o working in IT (at a small school, I take care of the techy stuff and my boss mainly does server-side things.  So I'm pretty low on the tech food chain). How would I get into Linux things? It's my daily-use computer at home (dual-drive boot Arch and Win8), and I've recently tried using it more at work (set up a clonezilla server for mass-imaging computers).   My local college offers a LPIC-1 (Linux something something something level-1 certification) course, but from personal experience, certs are kinda' worthless.   If you could comb through my rambling and come up with an answer, it'd be fantastic!
I'm in a similar business to you, and well understand the drive and passion from an early age, in fact we are the same age - though I think you got a bit of a head start on me!
If you want to target a certification, the RHEL certifications are the best respected in my opinion and experience. Start with the RHCSA then the RHCE.  As far as getting started, sounds like you are already off to a good start if you are dual booting.
Jesus christ. Here I was thinking my 1TB 840 SSD was overkill, lol.  
lol. I'm picky and I want my games to always be on SSD and I don't like uninstalling games. It's way overkill and definitely not cost efficient but it's what I love to do.
Well you see a definite boost in loading times and start up times with games. Games like Metro: LL load up INSTANTLY on an SSD. The only engine I know that doesn't care about solid state technology is the incredibly old Source engine.  And my favorite part is how quick anti-virus scans go by with these SSDs. It's great. I went onto my old computer with a 5400RPM HDD that's almost full and hasn't been defragmented in years, and it's horrifying.   
Linus (the initial creator of the Linux kernel) got bitten/nibbled by a penguin, and generally just likes the animal.    More info: http://en.wikipedia.org/wiki/Tux
Yes, loading times are the reason I invested in the SSD. The computer boots in &lt; 10 seconds and most games are extremely fast.  Skyrim with all my mods loads in ~30 seconds from main menu. That's insanely fast for that game. GTA V is only ~10-20 seconds offline and up to 40 seconds online.
To elaborate on /u/linuxarchitect's answer, the education comes into play when they bill you.  If you work for a small private company they probably won't care about the education as long as you can perform.  I work for a large defense contractor and I don't have a degree.  They can bill the gov't more for me if I have a degree so they are now holding that over my head and requiring me to get some type of degree if I want to be promoted.  I've worked here for 10 years and had nothing but Exceeds Expectations on my reviews and they still won't move me up without the degree.  My boss basically said "You're already doing the work so just go get a communications degree or something so that I can bill you at a higher rate and I'll promote you".   Edit - I have received multiple promotions over the years but to get to the next level they require a degree.
Wow well that is pretty cool.
Yes, there are some companies you can't work for without a degree and there's some companies who only let you go so high without one.  Same thing can be said for credit score these days. Without a good credit score, you will be limited in your career opportunities.  I'm personally OK with my work history and where I'm going. The degree wasn't for me.  If you (the internet) feel you need a degree to make it where you want to be, then by all means get it.
I just got promoted from Customer Service to a Junior Systems Engineer... woo! (I'm 23 and no college degree) I hear through the rafters that my team is planning on building a Solaris environment, and I have zero experience with Solaris. I just know that it's as old as the dinosaurs.   As someone who doesn't know anything about Solaris, do you have any beginner tips for it? Or should I just go with good ol' Google?
I would strongly urge you to communicate with your team and find out what their goals are and why they want to use Solaris to obtain those goals.  Some software requires Solaris so this may be why they are planning on doing this. However, I would recommend avoiding Solaris if possible.  With that out of the way, you should spend some time learning about ksh as it's the shell of choice in Solaris world. Additionally, learn to use pkill instead of killall.  A lot of commands have entirely different flags and some are missing flags entirely. df -h for example is actually df -k and even then looks far different in output.  I wish I had better news but congratulations on your promotion.
I'm a 15 year old boy, going 16 this July. I have a passion for technology, but I really don't know where to start. My focus is on computer privacy. What should I learn for now and what course should I take when I get into a university?
You should get into Information Security. :)  First you should learn everything you can about networking in general, and then after that branch into security. There's a big demand for cyber security professionals out there.
Yeah, that's the problem, I don't feel I need it to do the work at the next level but they do so I'm stuck pursuing the degree, doing nothing and getting 2%-3% raises a year, or finding another job.  The company is great benefit wise and my schedule is pretty much whatever I want it to be so it's hard to give that up. 
I understand fully...  The university I worked at was make-my-own-schedule but I couldn't move up without a degree. I left them.  I was at a company with great benefits but I just wasn't moving up (nothing related to a degree). I left them.  I found the best way to increase my salary was to move jobs entirely.  Either way, good luck!
A lot of Universities are starting to have Digital Forensics degree programs you can pursue. I would recommend that path because nothing prepares you for privacy more than understanding the viewpoint and tools of the authorities and blackhats.  As far as what you can do right now, learn about topics such as PGP, AES, TOR, SSL, and social engineering.  Beyond that, follow the links I provided in this AMA and try to learn Linux best you can.
Hi!  I'm a first year CS student who's been running Linux at home since... oh... I was about 12 years old. :P I've played around with setting up Apache and other things here and there but obviously because I was doing it without any specific goals in mind my knowledge is spotty.  How do you find Linux knowledge is in the industry?  Some of the things you've been discussing and some of the questions you've been fielding seem pretty basic. (to me) I've also noticed at school that while some profs seem to be exclusively CLI/*nix guys, a surprising number of them don't seem to feel comfortable using those tools at all.
The questions in this AMA have been fairly basic but that was to be expected. Most of the people who would be interested in reading or responding to this AMA will have no knowledge in Linux or are just beginning their knowledge.  I have not personally met many people who have an intimate knowledge of Linux. There are a ton of people who can find their way around through the help of search engines and man pages and that's just fine for the vast majority of jobs out there including the ones held by your professors.  When you have a mission critical emergency though, you don't want to be the guy frantically googling and trying every answer to diagnose and fix the problem. Your boss will remember that.  You want to be the guy who expertly diagnoses and fixes the issue without hardly a sweat. It's the difference between a promotion and potentially being fired.  That is, of course, an extreme example but my point is if you work in a decent sized team of Linux admins or Linux isn't your primary job duty, it's ok not to be a guru at everything.  If you work solo, are team lead, and/or people depend on your knowledge, you need to be the best you can be.
